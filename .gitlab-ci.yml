stages:
  - test
  - publish

include:
  - template: Dependency-Scanning.gitlab-ci.yml
  - template: SAST.gitlab-ci.yml

sast:
  variables:
    SAST_EXCLUDED_PATHS: test/**

# Lint js files.
lint-js:
  image: node:22
  stage: test
  script:
    - npm i -D
    - npm run lint

quality-check:
  image:
    name: ghcr.io/qltysh/qlty:v0.507.0
    entrypoint: [""]
  stage: test
  variables:
    GIT_STRATEGY: clone
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
  before_script:
    - echo "Installing curl..."
    - apt update && apt install -y curl jq
    - echo "Downloading SARIF Converter..."
    - curl -L -o sarif-converter https://gitlab.com/ignis-build/sarif-converter/-/releases/permalink/latest/downloads/bin/sarif-converter-linux-amd64
    - chmod +x sarif-converter
  script:
    - echo "Initializing project with Qlty..."
    - qlty init --no || echo "Already initialized"
    - echo "Running qlty check"
    - qlty check --upstream origin/$CI_MERGE_REQUEST_TARGET_BRANCH_NAME --sarif --no-error --no-formatters --no-fail | tee qlty_report.sarif
    - jq '(.runs[]?.tool?.driver?.releaseDateUtc) |= (if test("T") then . else . + "T00:00:00Z" end)' qlty_report.sarif > qlty_report_fixed.sarif
    - echo "Converting SARIF report to GitLab CodeQuality JSON..."
    - ./sarif-converter --type codequality qlty_report_fixed.sarif gl-code-quality-report.json
  artifacts:
    reports:
      codequality: gl-code-quality-report.json
  allow_failure: true

# Performs unit testing.
unit-test:
  coverage: '/Statements\s*:\s*(\d+(?:\.\d+)?\%)/'
  image: node:16-alpine
  timeout: one minute
  stage: test
  artifacts:
    paths: [coverage]
  script:
    - npm i -g mocha nyc
    - npm ci .
    - npm run coverage

compat-test-node-18:
  image: node:18-alpine
  timeout: one minute
  stage: test
  script:
    - npm ci .
    - npm t

compat-test-node-20:
  image: node:20-alpine
  timeout: one minute
  stage: test
  script:
    - npm ci .
    - npm t

compat-test-node-22:
  image: node:22-alpine
  timeout: one minute
  stage: test
  script:
    - npm ci .
    - npm t

# Publish package to NPM.
publish:
  stage: publish
  image: node
  rules:
    - if: '$CI_COMMIT_TAG'
  script:
    - npm set //registry.npmjs.org/:_authToken $NPM_TOKEN
    - npm publish

build:
  image: docker:latest
  stage: publish
  services:
    - docker:dind
  only:
    - tags
    - triggers
  script:
    - TAG=${CI_COMMIT_TAG:1}
    # - MAJ=$(echo "$TAG" | cut -d. -f1)
    - MIN=$(echo "$TAG" | cut -d. -f1,2)
    - docker build --pull
      -t "gcsboss/$CI_PROJECT_NAME:$MIN"
      -t "gcsboss/$CI_PROJECT_NAME:$TAG"
      -t "gcsboss/$CI_PROJECT_NAME"
      .
    - docker login -u "$DOCKER_HUB_USER" -p "$DOCKER_HUB_PASSWORD"
    - docker push "gcsboss/$CI_PROJECT_NAME:$MIN"
    - docker push "gcsboss/$CI_PROJECT_NAME:$TAG"
    - docker push "gcsboss/$CI_PROJECT_NAME"

build-node22:
  image: docker:latest
  stage: publish
  services:
    - docker:dind
  tags:
    - docker
  only:
    - tags
    - triggers
  script:
    - TAG=${CI_COMMIT_TAG:1}
    - MIN=$(echo "$TAG" | cut -d. -f1,2)
    - docker build --pull -f Dockerfile-node22
      -t "gcsboss/$CI_PROJECT_NAME:$MIN-node22"
      -t "gcsboss/$CI_PROJECT_NAME:$TAG-node22"
      -t "gcsboss/$CI_PROJECT_NAME:node22"
      .
    - docker login -u "$DOCKER_HUB_USER" -p "$DOCKER_HUB_PASSWORD"
    - docker push "gcsboss/$CI_PROJECT_NAME:$MIN-node22"
    - docker push "gcsboss/$CI_PROJECT_NAME:$TAG-node22"
    - docker push "gcsboss/$CI_PROJECT_NAME:node22"

build-slim:
  image: docker:latest
  stage: publish
  services:
    - docker:dind
  tags:
    - docker
  only:
    - tags
    - triggers
  script:
    - TAG=${CI_COMMIT_TAG:1}
    - MIN=$(echo "$TAG" | cut -d. -f1,2)
    - docker build --pull -f Dockerfile-slim
      -t "gcsboss/$CI_PROJECT_NAME:$MIN-slim"
      -t "gcsboss/$CI_PROJECT_NAME:$TAG-slim"
      -t "gcsboss/$CI_PROJECT_NAME:slim"
      .
    - docker login -u "$DOCKER_HUB_USER" -p "$DOCKER_HUB_PASSWORD"
    - docker push "gcsboss/$CI_PROJECT_NAME:$MIN-slim"
    - docker push "gcsboss/$CI_PROJECT_NAME:$TAG-slim"
    - docker push "gcsboss/$CI_PROJECT_NAME:slim"
